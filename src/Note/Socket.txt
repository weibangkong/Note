网络编程的两大问题：
1.精准定位主机
2.高效传输数据

TCP/IP协议中的IP层负责网络主机的定位，数据传输的路由；TCP层主要提供面向应用的可靠或非可靠的数据传输机制，是网络编程的主要对象。

两类传输协议:TCP(Transmission  Control Protocol)/UDP(User Datagram Protocol)
TCP：传输控制协议----->要通信先连接
    IP头：20,UDP头：8
    是面向连接的保证可靠的传输协议，通过TCP协议传输，得到的是一个顺序的无差错的数据流，发送方和接收方的成对的两个socket之间必须建立连接，以便
    在TCP协议的基础上进行通信，当一个socket等待建立连接时，另一个socket可以要求进行连接，一旦两个socket连接起来，他们就可以进行双向传输
UDP：用户数据报协议---->通信前不需要连接
    IP头：20,UDP头：8
    是一种无连接的协议，每个数据报都是一个独立的信息(包括完整的源地址和目的地址)，他在网络上能以任何可能的途径传往目的地，因此能否到达目的地，
    到达目的地的时间以及内容的准确性都是不能被保证的

TCP与UDP的区别：
    1.TCP是面向连接的,通信前需要建立连接，需要时间，UDP是无连接的，每个数据报都是独立信息，包括源地址和目的地址
    2.TCP是可靠的协议，能确保接收方顺序，完整的接收发送方所发送的全部信息，而UDP是不可靠，尽最大努力交付，顺序和完整性都不能保证
    3.TCP没有大小限制，一旦建立连接，socket双方可以按照统一的格式传输数据，UDP大小限制在64KB以内
    4.TCP对系统资源的要求多，而UDP要求的资源较少
    5.TCP是点对点的，而UDP支持一对一、一对多、多对一、多对多的交互通信
    6.TCP逻辑通信信道是全双工的可靠信道，而UDP是不可靠信道

应用场景:
    TCP：远程连接和文件传输都需要不定长度的数据被可靠传输，发送接收邮件
    UDP：实时性要求高或告诉传输的场合如视频传输或者实时通信






基于Socket的Java编程
什么叫Socket:网络上两个程序通过一个双向通讯连接实现数据交换，这个双向链路的一端成为一个Socket，Socket通常用来实现客户端和服务端的连接；
            一个Socket由一个IP和一个port唯一确定

Socket通讯过程:
    1.Server端Listen监听某个端口是否有连接请求
    2.Client端向Server端发送Connect请求
    3.Server端向Client端发送Accept消息，至此连接建立

    Server和Client都可以通过send(),write()方法与对方通信
