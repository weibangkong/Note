Web
servlet生命周期：
    1.加载和实例化，由web容器执行，但是用户需要指定web.xml来制定servlet的位置，成功加载后，web容器辉通过反射来实例化servlet
    2.初始化，当一个servlet被实例化后，容器会调用init()初始化这个servlet对象,目的是为了在处理客户端之前进行一些准备工作，如连接数据库，读取
      资源文件等，如果初始化失败，该servlet会被直接卸载，该方法在servlet的生命周期内仅会执行一次
    3.请求处理，当有请求时，servlet将调用service()方法进行处理，常用的是根据请求类型调用doGet(),doPost(),
      处理过程中，可以通过ServletRequest获取请求，也可以利用ServletResponse设置相应信息
    4.销毁，当web容器关闭或者检测到一个servlet要从容器中删除时，会自动调用destroy(),以便让该实例释放所占用资源
    5.卸载，当一个servlet实例调用玩destroy()后，该实力就会等待被GC回收，如果需要再次调用该Servlet时，会重新调用init()

转发forward与重定向(redirect)的区别：
    转发：地址栏不可见，服务器内部实现，而重定向是地址栏可见的，服务器让浏览器重新发送一个请求，且从定向以后request中的对象失效，转发不会，
    会造成资源丢失

HttpServletRequest类的getAttribute()和getParameter()区别:
    1.getParameter()用来接收post/get传递过来的请求参数
    2.getAttribute(),必须先setAttribute()
    3.getParameter是通过容器的实现来获取post/get等HTTP方式传入的数据，getArrtibute（set）只是在web容器内部流转，仅仅是请求处理阶段
    4.getParameter()会从web客户端到web服务端，代表Http请求，返回的是String类型的数据
    5.attribute有set和get，而parameter只有get

    总结:
        1.parameter没有set方法
        2.parameter用来获取http请求中的参数
        3.attribute用来做数据共享(个人理解，慎重)



Get与Post提交区别
    1.在Rest风格中，Get是用来获取数据的，Post是用来向服务器提交数据的
    2.Get在回退是无害的，Post在回退时会再次提交请求
    3.Get产生的URL可以被书签，Post不可以
    4.Get请求会被浏览器主动Cache，而Post不会
    5.Get只能URL编码，Post可以支持多种编码
    6.Get提交参数是在地址栏中，参数会随着URL被保留在浏览器中，且只接受ASCⅡ字符，Post提交放在消息头或者消息体中，且参数不会被保留，没有限制
    7.Get提交最大1024字节，Post没有限制
    8.Get提交发送一次TCP包，Post发送两次TCP包，在网络情况不好的情况下，优先Post提交

    ps:本质上Get和Post提交没有区别，都是通过HTTP实现，HTTP底层又是TCP/IP,所以Get和Post的底层都是TCP链接，但是在Get的requestBody中带数据
    有的服务器会读取，有的不会
       Get会把header和data一起发送到服务器，而Post会先发送header，再发送data

Session的生命周期:
    Session生效:
        在客户端第一次访问服务器时创建
    Session失效:
        1.服务器会把长时间没有活动的Session从服务器清楚，此时Session失效，Tomcat默认为20min
        2.调用Session.invalidate()
        在超出设置的失效时间，失效时间是从不活动的时候计算，一旦Session被访问，计时清0

    设置Session失效时间：
        1.web.xml:
            <session-config><session-timeout>30</session-timeout></session-config>
        2.在程序中手动设置：
            session.setMaxInactiveInterval(30*60)  -----    以秒为单位，-1 为永不过期
        3.在Tomcat设置


    ps:
        Session也是保存在在服务器端的，保存在客户端的是Cookie
        Session只有在访问JSP、Servlet时才会生成，在访问HTML、Image等静态资源时并不会创建Session，可以通过request.getSession(true)获得

JSP:
    jsp九大内置对象:
        request:封装客户端请求，其中包含GET和POST()请求的参数
        response:封装服务器对客户端的相应
        pageContext:通过该对象可以获得其他对象
        session:封装用户会话的对象
        application:封装服务器运行环境的对象
        out：输出服务器相应的输出流对象
        config:Web应用的配置对象
        page:JSP页面本身
        exception:封装页面中抛出的异常

    四个作用域：
        page                在当前页面有效
            只在当前页面有效，也就是用户请求的页面有效，当页面跳转或者关闭，page对象将在响应回馈给客户端后释放
        request             在本次请求有效
            在当前请求中有效，通过setAttribute()实现页面中信息传递，也可以通过forwar()方法进行页面间跳转，request是转发不是重定向
            对于浏览器来说是透明的，地址栏上显示的依旧是最初的值
        session             在当前会话有效
            在当前会话中有效，当一台客户端上的同意浏览器对服务器进行多次访问，在这多次访问之间传递的信息就是session作用域的范围，从浏览器
            发出第一个请求即可认为会话开始，但是会话结束时间是不确定的，因为在浏览器关闭时并不会通知服务器，一般tomcat设置默认时间是120分钟
            也可以通过setMaxInactiveInterval(int) 设置，或者通过invalidate()强制结束当前会话
        application         在应用程序中有效
            数据是保存在服务器端的，从服务器开始到服务器关闭这段时间都是有效的，同样通过setAttribute()和getAttribute()赋值

    JSP的静态包含<%@ include file=""%>和动态包含<jsp:include page ="">的区别
        1.静态包含使用JSP的include指令包含，动态包含是使用JSP的标准动作<jsp:forward>包含
        2.静态包含是编译时包含，两个页面合二为一，编译成一个class文件，被包含页面不存在会发生编译错误两个页面的contentType属性保持一致，
          被包含的页面发生改动必须熟悉包含页面，动态页面时运行时包含，编译成两个class文件，并可以向被包含页面传递参数，两个页面是独立的，
          被包含页面不在不会报错，不影响其他部分的执行



JSP与Servlet的异同点：
    JSP经过编译后就是Servlet(jsp本质就是Servlet，JVM只能识别Java类，不能识别JSP代码，web服务器将JSP编译成JVM能识别的Java类)
    JSP更擅长页面显示，Servlet更擅长逻辑处理
    Servlet没有内置对象，JSP的内置对象需要使用HttpServletRequest和HttpServletResponse或者HttpServlet获取
    JSP是Servlet的一种简化封装，编译后是"类Servlet"
    最主要不同点在于:
        Servlet的应用逻辑是在Java中，并完全从HTML里分离出来,而JSP则是Java+HTML组合成一个扩展名为.jsp的文件
        JSP侧重于视图，Servlet侧重于逻辑控制
        Servlet更多的是类似于一个控制器，用来做控制

    ps:s
        Session只有在访问JSP、Servlet时才会生成，在访问HTML、Image等静态资源时并不会创建Session，可以通过request.getSession(true)获得


Hibernate:
    SessionFactory是否是线程安全的，Session呢，两个线程可以共享一个Session么
    SessionFactory是线程安全的，可以同时被多个线程访问，Session是一个轻量级非线程安全的对象，线程之间也不能共享

    SessionFactory一般在程序启动时构建，最好做成单例模式
    Session表示与数据库进行交互的工作单元，Session由SessionFactory创建，在任务完成之后关闭(应关闭)，Session是持久层服务对外提供的主要接口
    Session会延时获取数据库连接(在需要的时候才会获取)，为了避免创建过多Session，可以将其与ThreadLocal绑定，Hibernate3中的SessionFactory
    .getCurrentSession()就可以做到

    get()和load()的区别:
        1.返回值:在一级缓存Session里存在记录时，get()和load()都返回实际对象，在Session中不存在缓存时，去二级缓存中查询在没有查找到记录时，get()返回null，load()抛出异常
    2：get()方法直接返回实体类对象，load()方法返回实体类对象的代理