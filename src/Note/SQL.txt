MySQL:
    引擎:
        innodb:
            提供事务管理功能，并实现了SQL标准的四个隔离级别，还提供了外键约束和行级锁，设计目标是处理大容量数据库，本身就是基于mysql后台的
            完整数据库系统，MySQL运行时会innodb会在内存中建立缓冲池，用于缓冲和索引，但是该引擎不支持FULLTEXT类型的索引，并且没有保存表的
            行数，当使用count(1)时需要全表扫描，提供事务，锁细粒度小，写操作不会锁全表，所以在并发较高时使用该引擎会提高效率，但是不一定是
            必然不锁全表，在数据库无法判断要扫描的范围时，也会锁全表
        MyISAM:
            MySQL的默认引擎，不支持事务，也不提供行级锁和外键，因此在insert或者update时需要锁全表，效率会低，但是存储了表的行数，count(1)
            时直接读取值而不是扫描，如果表的读操作远多于写操作并且不需要事务的支持，该引擎也不错

        区别：
            1.MyISAM是非事务安全的，innodb是事务安全的
            2.MyISAM锁的细粒度是表级，innodb支持行级锁
            3.MyISAM支持全文类型索引，innodb不支持全文索引
            4.MyISAM效率上比innodb好
            5.MyISAM表保存成文件形式，方便跨平台使用

    mysql -uuserName -ppassword;
    show databases;
    select database(); 查看当前使用的库
    use databaseName;
    create database databaseName default character set utf8;
    drop database databaseName;

    grant PRIVILEGE on databaseName.tableName to userName@"ip" identified by password [with grant option];
        权限:
            all privileges
            create
            select
            insert
            update
            delete
            drop
            alter
            index
            grant
            references
            reload
            shutdown
    with grant option:是该用户可以将自己的权限继承给其他用户

    flush privileges;
    revoke PRIVILEGE ON *.* from userName;

    drop user userName;

    select version();
    select now();

    select user();

    select now();
    select sysdate();
    select current_date;

    delimiter;   分隔符

    drop table if table exists tableName;
    create table tableName (
        id int primary key auto_increment,
        name varchar(32) nuique,
        sex int check(sex in ("0","1")),
        tel varchar(32) not null,
        class int foreign key references t_class(class_id)
    ) engine = innodb default charset = utf8 comment '注释';

视图：
    create view viewName as
        select *****from **** where ****


对表结构进行修改：
    alter table tableName change columeName_a columeName_b columeType;    使用时必须给出原列名和新列名以及列类型
    alter table tableName modify columeName columeType [Constraints];
    alter table tableName add columeName columeType
     [constraints];
    alter table tableName drop columeName;

    约束(Constraints):
        show keys from tableName;   用来查看表上已有约束

        primary key   alter table tableName add primary key(columeName);
                      alter table tableName drop primary key;
        foreign key   alter table tableName1 add foreign key(columeName1) references tableName2(columeName2)
        unique        alter table tableName add unique(columeName);
        not null      alter table tableName add not null(columeName);
        check         alter table tableName add check(columeName condition)  在MySQL中非强制检查，即不满足条件也可插入


        如需对约束命名则在操作后面添加 constraint constraintName，例如：
            alter table tableName add constraint constraintName primary key(columeName);

        如果在知道约束名的情况下，推荐使用如下去除约束的语句：
            alter table tableName index constraintName；


查询：
    select [distinct] columeName from tableName;

    order by columeName DESC(从大到小/降序,ASC为升序/从小到大，默认为ASC)

    where name like '%孔维邦%'包含孔维邦
    where name like '孔维邦%' 以孔维邦开头
    where name like '%孔维邦' 以孔维邦结尾


    格式化时间：
    date_fromat(date,'%Y-%m-%d %H:%i:s'); ------------ 2019-03-06 17:28:49

    查看warning:
    show warnings;

    符合排序


用户变量：
    场景如下：
    对查询结果添加一个序号:
        SELECT (@i:=@i+1) i FROM vote, (SELECT @i:=0) AS i

        SELECT (@i:=@i+1) 别名  FROM 表明, (SELECT @i:=0) AS 别名

        根据学生成绩对学生排名
        +----+--------+-------+
        | id | name   | score |
        +----+--------+-------+
        |  1 | 张三   |    80 |
        |  2 | 李四   |    82 |
        |  3 | 王五   |    80 |
        |  4 | 赵六   |    90 |
        |  5 | 李二   |    91 |
        |  6 | 孔零   |    67 |
        +----+--------+-------+
        select (@i:= @i+1) 排名, student.id 学号,student.name 姓名,student.score 分数 from student ,(select @i:=0) as i order by score,name desc;


delimiter // 定义结速符，当输入定义好的结速符后mysql会立即执行

序列：MySQL中没有列，如果要按照自己的规则实现递增，则需要实现序列，如下实现：
    1.创建序列表
    create table sequence(
        name varchar(50) primary key,
        current_value bigint,
        increment int not null default 1
    ) engine = innodb;
    2.插入序列数据：
    insert into sequence values('seq_1',1,1);
    3.创建返回当前值的函数:
        delimiter// 定义结速符为//
        Drop function if exists currval;
        create function 'currval'(seq_name varchar(50)) returns int
        begin
            declare value int;
            set value = 0;
            select current_value into value from sequence where name = seq_name;
            return value;
        end//
        delimiter ; --更改会原来的默认结束符
    4.创建取下一个值的函数
        delimiter //
        drop function if exists nextval；
        create function nextval(seq_name varchar(50)) returns int
        begin
            update sequence set current_value = current_vale + incrment where name = seq_name;
            return current(seq_name);
        end;//
        delimiter ；
    5.创建更新当前值的函数
        drop function if exists setval;
        create function setval(seq_name varchar(50),newval int) returns int
        begin
            update sequence set cuttent_value = newval where name = seq_name;
            return currval(seq_name);
        end;


    6.为表设置触发器：


function：
    见上面的例子MySQL定义序列的例子
    show function status();

索引：
    create index indexName on tableName(columeName);

触发器：
    delimiter //
    create trigger 'triggerName' BEFORE insert on tableName for each row
    begin
        declare jobno varchar(30);
        declare time1 varchar(20);
        set jobno = (select job_num into jobno from t_job where name = XXX);
        set time1 = date.format(new.date,'%Y-%m-%d %H:%i:s');
        insert into t_job (job_no,time1) values(jobno,time1);
    end;//
    delimiter ;
    触发器使用在改变自身属性时 使用 set new.columeName = 'XXX' 应该用before;
    在触发器中对本表进行操作时，update操作使用set，insert，delete需要借助第二张表
    只有在before insert 触发器中可以更新本表
    例：
        delimiter //
        create trigger tri before insert on tableName for each row begin set new.columeName = XXX;end;//
        delimiter;

    IF...THEN ...[ELSEIF...THEN...]END IF;
存储过程：
    优点：
        1.增强SQL语言的功能和灵活性
        2.标准式的组件编程，一次编码多次使用无需再次编写SQL
        3.较快的执行速度,相对于批处理Transaction-SQL带代码或其被多次执行，存储过程要比批处理快
        4.减少网络流量
        5.可以作为一种安全机制，可以通过对执行某一个存储过程的权限进行控制，实现对相应数据的访问控制，避免非授权用户对数据的访问，保证数据安全

    MySQL5.0开始支持存储过程
    delimiter //
    create procedure proName(in/out/inout 参数 阐述类型...)
        begin
            select count(*) into 参数 from tableName
        end;
    //
    delimiter ;   改行语义：将分割符还原

    参数类型：
        in：必须在调用时指定，在存储过程中修改该类型参数的值不能被返回，是默认值
        out：该值可以在过程中被修改，可以返回
        inout ：调用时指定，并且可以被修改和返回
事务：
    四大特性:ACID
        Atomicity:原子性:要么全部成功要么全部失败
        Consistency:一致性:事务必须使数据库从一个一致性状态变换成另一个一致性状态
        Isolation:隔离性:多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务所干扰，多个并发事务之间
                  要相互隔离(例:对于任意并发的事务T1和T2，在事务T1看来，T2要么在T1之前结束，要么在T2在T1结束之后才开始，
                  这样每个事务都感觉不到其他事务在并发执行)
        Durability:持久性:指一个事务一旦被提交了，那么对数据库中的数据的改变就应该使永久性的，即使是数据库系统遇到故障

    隔离级别:
        在不考虑事务的隔离性的情况下，会发生：
            1.脏读(一个事务处理过程中读取了另一个未提交事务中的数据)，
            2.不可重复读(指对于数据库中某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔内，数据被另一个事务修改并提交)
            3.幻读(是由事务非独立执行导致的一种现象)例如T1对表中所有数据行做了从"1"变为"2"的操作，这是T2又对该表插入了一行新数据，并且为"1"
              并且提交了，这时T1的用户再查看刚刚修改的数据，会发现有一条没有更改，其实这行时T2添加的，就像产生T1没有执行成功的幻觉，这就发生
              了幻读

            ps:幻读和不可重复读都是读取了另一条已经提交的事务(脏读是读取了另一条事务未提交的数据)，不同的是不可重复读针对的是同一条目数据的
               多次读，而幻读针对的是对表内的一批数据整体

        四个隔离级别:
                                      脏读           不可重复读         幻读
            Read Uncommitted           1                1              1
            Read committed             0                1              1
            repeatable read            0                0              1
            serializable               0                0              0


    传播特性:
        propagation_required:支持当前事务如果当前不存在事务，就创建一个事务，如果存在事务，就加入这个事务-------最常见选择
        propagation_supports:支持当前事务，如果当前存在事务，就加入事务，如果没有事务，就以非事务执行
        propagation_mandatory:支持当前事务，使用当前事务，如果没有当前事务，则抛出异常
        propagation_required_new:支持当前事务，新建事务，无论当前存不存在事务，如果当前存在事务，则将当前事务挂起

        propagation_not_supported:不支持事务，以非事务方式执行，如果当前存在事务，则将事务挂起
        propagation_never:不支持事务，以非实物方式执行，如果当前存在事务，则抛出异常
        propagation_nested：不支持事务，如果当前存在事务，则在嵌套事务内执行，如果当前没有事务，则执行与propagation_required相似操作

        ps:注意与spring事务的传播特性区分，

用户变量：@

常用函数：
    data_format(data,'%Y-%m-%d %H:%i:%s'); 格式化时间
    ifnull(expr1,expr2) 当expr1为空时返回expr2
    avg(columeName) 取列平均值
    sum(columeName) 取列的和
    count(columeName) 取条目数
    max(columeName) 取列最大值
    min(columeName) 取列最小值
    ucase(columeName) 取列且大写
    lcase(columeName) 取列且小写
    mid(columeName,start[,length])截取列的从start开始的长度为length的字符
    len(columeName)获取列的长度
    round(columeName) 将列精确指定小数位


导致索引失效的操作：
1.在使用or时，存在条件字段不是索引列的
2.字符型数据没加''
3.模糊查询开头不是确定的
4.对于队列索引，不是引用的第一部分
5.数据库任务全表查询比使用索引查询更快时

sql优化:
    1.能用between的就不用in
    2.exists代替in
    3.避免使用参数 select id from t where name =@name ，改为强制查询使用索引：select id from t with(index(索引名)) where name =@name
    4.避免在where 子句中进行表达式操作



预编译:
    sql预编译是指数据库驱动在发送sql语句和参数给DBMS之前会对sql进行编译，这样DBMS执行时，就不需要重新编译。

为什么需要预编译:
    JDBC中使用对象PreparedStatement来抽象预编译语句,使用预编译。预编译阶段可以优化sql执行，预编译之后的sql多数情况下可以直接执行,
    DBMS不需要再次编译，越是复杂的sql编译的复杂度越高，预编译可以合并多个操作为一个操作，预编译对象可以重复利用，把一个sql编译后产生的
    PreparedStatement对象缓存下来，下次对于同一个sql，可以直接使用这个缓存的pareparedState对象。（mybatis默认情况下，会对所有的sql
    预编译进行）。